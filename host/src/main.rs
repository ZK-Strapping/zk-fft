// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{HELLO_GUEST_ELF, HELLO_GUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // input : [a0, a1, ..., an] for a0 + a1 * x + ... + an * x^n
    let n: usize = 2;
    let ax: Vec<f64> = vec![-1.0, 1.0]; // -1 + x
    let m: usize = 5;
    let bx: Vec<f64> = vec![1.0, 1.0, 1.0, 1.0, 1.0]; // 1 + x + x^2 + x^3 + x^4

    let env = ExecutorEnv::builder()
        .write(&n)?
        .write(&ax)?
        .write(&m)?
        .write(&bx)?
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env, HELLO_GUEST_ELF).unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: Vec<f64> = receipt.journal.decode().unwrap();
    println!(
        "Input: n = {}, ax = {:#?},\n m = {}, bx = {:#?}",
        n, ax, m, bx
    );
    println!("Public output: {:#?}", _output);

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(HELLO_GUEST_ID).unwrap();

    Ok(())
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::fs::File;
    use std::io::{prelude::*, BufReader};
    use std::usize;

    #[test]
    fn test_poly_mul() -> Result<(), Box<dyn std::error::Error>> {
        env_logger::init();

        let test_case = "example_00";
        let input_file =
            File::open(format!("./src/tests/in/{}.in", test_case)).expect("file not found");
        let mut input_lines = BufReader::new(input_file).lines();

        let nm: Vec<_> = input_lines
            .next()
            .unwrap()?
            .split_whitespace()
            .map(|x| x.parse::<usize>().unwrap())
            .collect();
        let n: usize = nm[0];
        let m: usize = nm[1];

        let ax: Vec<f64> = input_lines
            .next()
            .unwrap()?
            .split_whitespace()
            .map(|x| x.parse::<f64>().unwrap())
            .collect();
        let bx: Vec<f64> = input_lines
            .next()
            .unwrap()?
            .split_whitespace()
            .map(|x| x.parse::<f64>().unwrap())
            .collect();

        let env = ExecutorEnv::builder()
            .write(&n)?
            .write(&ax)?
            .write(&m)?
            .write(&bx)?
            .build()
            .unwrap();
        let prover = default_prover();
        let receipt = prover.prove_elf(env, HELLO_GUEST_ELF).unwrap();
        let _output: Vec<f64> = receipt.journal.decode().unwrap();
        println!(
            "Input: n = {}, ax = {:#?},\n m = {}, bx = {:#?}",
            n, ax, m, bx
        );
        println!("Public output: {:#?}", _output);

        let output_file =
            File::open(format!("./src/tests/out/{}.out", test_case)).expect("file not found");
        let real_output: Vec<f64> = BufReader::new(output_file)
            .lines()
            .next()
            .unwrap()?
            .split_whitespace()
            .map(|x| x.parse().unwrap())
            .collect();

        assert_eq!(&_output[..(n + m - 1)], real_output);

        Ok(())
    }
}
