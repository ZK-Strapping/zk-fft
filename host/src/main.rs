// These constants represent the RISC-V ELF and the image ID generated by risc0-build.
// The ELF is used for proving and the ID is used for verification.
use methods::{HELLO_GUEST_ELF, HELLO_GUEST_ID};
use risc0_zkvm::{default_prover, ExecutorEnv};

fn main() -> Result<(), Box<dyn std::error::Error>> {
    // Initialize tracing. In order to view logs, run `RUST_LOG=info cargo run`
    env_logger::init();

    // An executor environment describes the configurations for the zkVM
    // including program inputs.
    // An default ExecutorEnv can be created like so:
    // `let env = ExecutorEnv::builder().build().unwrap();`
    // However, this `env` does not have any inputs.
    //
    // To add add guest input to the executor environment, use
    // ExecutorEnvBuilder::write().
    // To access this method, you'll need to use ExecutorEnv::builder(), which
    // creates an ExecutorEnvBuilder. When you're done adding input, call
    // ExecutorEnvBuilder::build().

    // input : [a0, a1, ..., an] for a0 + a1 * x + ... + an * x^n
    let n: usize = 2;
    let ax: Vec<i64> = vec![-1, 1]; // -1 + x
    let m: usize = 5;
    let bx: Vec<i64> = vec![1, 1, 1, 1, 1]; // 1 + x + x^2 + x^3 + x^4

    let env = ExecutorEnv::builder()
        .write(&n)?
        .write(&ax)?
        .write(&m)?
        .write(&bx)?
        .build()
        .unwrap();

    // Obtain the default prover.
    let prover = default_prover();

    // Produce a receipt by proving the specified ELF binary.
    let receipt = prover.prove_elf(env, HELLO_GUEST_ELF).unwrap();

    // TODO: Implement code for retrieving receipt journal here.

    // For example:
    let _output: Vec<i64> = receipt.journal.decode().unwrap();
    println!(
        "Hello, world! I generated a proof of guest execution! {:#?} is a public output from journal ",
        _output
    );

    // Optional: Verify receipt to confirm that recipients will also be able to
    // verify your receipt
    receipt.verify(HELLO_GUEST_ID).unwrap();

    Ok(())
}
